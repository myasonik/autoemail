// mathsass by terkel
// https://github.com/terkel/mathsass

$PI: 3.141592653589793;

// Strip unit from a number
@function strip-unit ($number) {
    @if unitless($number) {
        @return $number;
    } @else {
        @return $number / ($number * 0 + 1);
    }
}

// Returns base to the exponent power.
// @param {Number} $base The base number
// @param {Number} $exp The exponent to which to raise base
// @return {Number}
// @example
//     pow(4, 2)   // 16
//     pow(4, -2)  // 0.0625
//     pow(4, 0.2) // 1.31951
@function pow ($base, $exp) {
    @if $exp == floor($exp) {
        $r: 1;
        $s: 0;
        @if $exp < 0 {
            $exp: $exp * -1;
            $s: 1;
        }
        @while $exp > 0 {
            @if $exp % 2 == 1 {
                $r: $r * $base;
            }
            $exp: floor($exp * 0.5);
            $base: $base * $base;
        }
        @return if($s != 0, 1 / $r, $r);
    } @else {
        @return exp(log($base) * $exp);
    }
}

// Returns the factorial of a non-negative integer.
// @param {Number} $x A non-negative integer.
// @return {Number}
// @example
//     fact(0) // 1
//     fact(8) // 40320
@function fact ($x) {
    @if $x < 0 or  $x != floor($x) {
        @warn "Argument for `fact()` must be a positive integer.";
        @return null;
    }
    $ret: 1;
    @while $x > 0 {
        $ret: $ret * $x;
        $x: $x - 1;
    }
    @return $ret;
}


// Convert deg to rad
@function deg-to-rad ($deg, $unit: true) {
  @return strip-unit($deg) * $PI / 180 * if($unit, 1rad, 1);
}

// Convert to unitless rad
@function unitless-rad ($angle) {
    @if unitless($angle) {
        @return $angle;
    } @else if unit($angle) == rad {
        @return $angle / 1rad;
    } @else if unit($angle) == deg {
        @return deg-to-rad($angle, false);
    } @else if type-of($angle) != number or not unitless($angle) {
        @warn "#{ $angle } is not a valid number.";
        @return $angle;
    }
}

// Returns the sine of a number.
// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.
// @example
//     sin(1.0472) // 0.86603
//     sin(60deg)  // 0.86603
@function sin ($x) {
    $x: unitless-rad($x);
    @return cos($x - $PI / 2);
}

// Returns the cosine of a number.
// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.
// @example
//     cos(0.7854) // 0.70711
//     cos(45deg)  // 0.70711
@function cos ($x) {
    $x: unitless-rad($x);
    $ret: 0;
    @for $n from 0 to 24 {
        $ret: $ret + pow(-1, $n) * pow($x, 2 * $n) / fact(2 * $n);
    }
    @return $ret;
}